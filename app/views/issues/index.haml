= call_hook(:view_issues_index_header, { issues: @issues, project: @project, query: @query })

%div.contextual
  - is_user_allowed     = User.current.allowed_to?(:add_issues, @project, global: true)
  - is_trackers_allowed = Issue.allowed_target_trackers(@project).any?
  - if is_user_allowed && (@project.nil? || is_trackers_allowed)
    = link_to(l(:label_issue_new), _new_project_issue_path(@project), class: "icon icon-add new-issue")
  = actions_dropdown do
    - if @project
      = link_to(l(:field_summary), project_issues_report_path(@project), class: "icon icon-stats")
    - if User.current.allowed_to?(:import_issues, @project, global: true)
      = link_to(l(:button_import), new_issues_import_path(project_id: @project), class: "icon icon-import")

    - options = { controller: "projects",
                  action:     "settings",
                  id:         @project,
                  tab:        "issues" }
    - css_class            = User.current.allowed_to?(:manage_categories, @project) ? "icon icon-settings" : ""
    = link_to_if_authorized(l(:label_settings), options, class: css_class)

  = call_hook(:view_issues_index_contextual, { issues: @issues, project: @project, query: @query })

%h2
  = @query.new_record? ? l(:label_issue_plural) : @query.name
- html_title(@query.new_record? ? l(:label_issue_plural) : @query.name)

= form_tag(_project_issues_path(@project), method: :get, id: "query_form") do
  = render(partial: "queries/query_form")

- if @query.valid?
  - if @issues.empty?
    %p.nodata= l(:label_no_data)
  - else
    = render_query_totals(@query)
    = render(partial: "issues/list", locals: { issues: @issues, query: @query })
    %span.pagination= pagination_links_full(@issue_pages, @issue_count)

  - other_formats_links do |f|
    = f.link_to_with_query_parameters("Atom", key: User.current.rss_key)
    = f.link_to_with_query_parameters("CSV", { }, onclick: "showModal('csv-export-options', '350px'); return false;")
    = f.link_to_with_query_parameters("PDF")

  %div#csv-export-options{ style: "display:none;" }
    %h3.title= l(:label_export_options, export_format: "CSV")
    = form_tag(_project_issues_path(@project, format: "csv"), method: :get, id: "csv-export-form") do
      = query_as_hidden_field_tags(@query)
      %p
        %label
          = radio_button_tag("c[]", "", true)
          = l(:description_selected_columns)
        %br
        %label_changes_details
          = radio_button_tag("c[]", "all_inline")
          = l(:description_all_columns)
      %p
        %label
          = check_box_tag("c[]", "description", @query.has_column?(:description))
          = l(:field_description)
        %label
          = check_box_tag("c[]", "last_notes", @query.has_column?(:last_notes))
          = l(:label_last_notes)
      = export_csv_encoding_select_tag
      - if @issue_count > Setting.issues_export_limit.to_i
        %p.icon.icon-warning
          = "#{ l(:setting_issues_export_limit) } : #{ Setting.issues_export_limit.to_i }"
      %p.buttons
        = submit_tag(l(:button_export), name: nil, onclick: "hideModal(this);", data: { disable_with: false })
        = link_to_function(l(:button_cancel), "hideModal(this);")

= call_hook(:view_issues_index_bottom, { issues: @issues, project: @project, query: @query })

- content_for(:sidebar) do
  = render(partial: "issues/sidebar")

- content_for(:header_tags) do
  - atom_options = { query_id: @query, 
                     format:   "atom",
                     page:     nil,
                     key:      User.current.rss_key }
  = auto_discovery_link_tag(:atom, atom_options, title: l(:label_issue_plural))

  - atom_journals_options = { controller: "journals",
                              action:     "index",
                              query_id:   @query,
                              format:     "atom",
                              page:       nil,
                              key:        User.current.rss_key }
  = auto_discovery_link_tag(:atom, atom_journals_options, title: l(:label_changes_details))

= context_menu